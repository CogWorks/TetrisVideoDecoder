'''
    File name: TVD.py
    Copyright: Copyright 2017, The CogWorks Laboratory
    Author: Hassan Alshehri
    Email: alsheh@rpi.edu or eng.shehriusa@gmail.com
    Data created: May 22, 2017
    Date last modified: August 26, 2017
    Description: Character Recognition
    Status: Research
    Requirements/Dependencies:
        1. Python 2.7,
        2. OpenCV 3 (may not work with OpenCV 2),
        3. NumPy
'''
import cv2
import numpy as np
import operator
import os
import argparse
import re

# Module Level Variables
RESIZED_IMAGE_WIDTH = 20
RESIZED_IMAGE_HEIGHT = 30

def removeNoise(img, game):
    # Convert BGR to HSV
    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

    # Define range of background color in HSV
    lower = np.array(game.DIGIT_LOW)
    upper = np.array(game.DIGIT_HIGH)

    # Create a mask of the background.
    # This makes the background white and everything else black.
    mask = cv2.inRange(hsv, lower, upper)

    # Inverse the mask of the background to make
    # the backgorund black and everything else white.
    maskInv = cv2.bitwise_not(mask)

    # Remove the background from the color image
    colorImg = cv2.bitwise_and(img, img, mask=maskInv)

    return colorImg, maskInv


class OCR:
    '''
    This class implments character recognition using K nearest neighbors (KNN) algorithm.
    '''
    def __init__(self):
        # Read in training classifications KNN
        try:
            path = re.sub('ocr.*', 'classifications.txt', __file__)
            npaClassifications = np.loadtxt(path, np.float32)
        except:
            print "error, unable to open classifications.txt, exiting program\n"
            os.system("pause")
            exit(1)

        # Read in training images
        try:
            path = re.sub('ocr.*', 'flattened_images.txt', __file__)
            npaFlattenedImages = np.loadtxt(path, np.float32)
        except:
            print "error, unable to open flattened_images.txt, exiting program\n"
            os.system("pause")
            exit(1)

        # Reshape numpy array to 1d, necessary to pass to call to train
        npaClassifications = npaClassifications.reshape((npaClassifications.size, 1))

        # Instantiate KNN object
        self.kNearest = cv2.ml.KNearest_create()

        self.kNearest.train(npaFlattenedImages, cv2.ml.ROW_SAMPLE, npaClassifications)

        self.DIGIT_LOW = [0, 0, 0] # default [0, 0, 0]
        self.DIGIT_HIGH = [179, 255, 100] # default [179, 255, 100]


    def readCharacters(self, imgTestingNumbers, isWhiteBackground=False, game=None, firstChar=None):
        # This list will store cropped characters from the image
        validContoursWithData = []

        # If the the image has a white background, make backgroudn black and rest of image white
        if isWhiteBackground:
            imgTestingNumbers = cv2.threshold(imgTestingNumbers, 200, 255, cv2.THRESH_BINARY_INV)[1]

        # Resize image for consistency to avoid too small or too large images.
        w, h = imgTestingNumbers.shape[1::-1]
        scale = float(135)/h
        imgTestingNumbers = cv2.resize(imgTestingNumbers, (int(w*scale), int(h*scale)))

        imgOrig = imgTestingNumbers.copy()

        # Remove background and noise from frame
        colorImg, blackWhiteImg = removeNoise(imgTestingNumbers, game)
        imgThresh = blackWhiteImg

        # make a copy of the thresh image, this in necessary b/c findContours modifies the image
        imgThreshCopy = imgThresh.copy()

        # arg#2: retrieve the outermost contours only
        # arg#3: compress horizontal, vertical, and diagonal segments and leave only their end points
        _, contours, _ = cv2.findContours(imgThreshCopy, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        if firstChar is not None:
            x, y, w, h = firstChar
            minCharArea = w * h
            # Draw two lines above and below the digits
            upperLine = int(firstChar[1]-firstChar[1]*0.1)
            lowerLine = int(firstChar[1]+firstChar[3]+firstChar[1]*0.1)
            cv2.line(imgTestingNumbers,(0,upperLine),(511,upperLine),(255,0,0),2)
            cv2.line(imgTestingNumbers,(0,lowerLine),(511,lowerLine),(255,0,0),2)

        # Iterate over all contours (digits) and reject too small or large ones.
        for c in contours:
            x,y,w,h = cv2.boundingRect(c)
            area = w * h
            contour = imgTestingNumbers[y:y+h, x:x+w]

            if firstChar is not None:
                # If part of a character is above or below
                # two lines drawn above, reject it.
                if y < upperLine or y > lowerLine:
                    continue

                if minCharArea*0.3 > area:
                    cv2.rectangle(imgTestingNumbers, (x, y), (x+w, y+h), (0,0,255), 2)
                    continue
                #else:
                    #cv2.rectangle(imgTestingNumbers, (x, y), (x+w, y+h), (255,50,50), 2)
            else:
                cv2.rectangle(imgTestingNumbers, (x, y), (x+w, y+h), (180,180,0), 2)

            validContoursWithData.append( (x,y,w,h) )

        if firstChar is not None:
            # Find disconnected contours and connect them.
            tmp = set()
            for c1 in validContoursWithData:
                isContourDisconnected = False
                for c2 in validContoursWithData:
                    im = imgOrig.copy()
                    x1, y1, w1, h1 = c1
                    x2, y2, w2, h2 = c2
                    if x1 > x2:
                        x1, y1, w1, h1 = c2
                        x2, y2, w2, h2 = c1

                    x, y = x2, y1
                    w = (x1 + w1) - x2
                    h =  (y2 + h2) - y1 #(y1 + h1) - (y2 + h2) - y
                    cv2.rectangle(im, (x1, y1), (x1+w1, y1+h1), (0, 255, 0), 2)
                    cv2.rectangle(im, (x2, y2), (x2+w2, y2+h2), (0, 0, 255), 2)

                    ar = h * w
                    if ar*5 > minCharArea or True:
                        cv2.rectangle(im, (x, y), (x+w, y+h), (100, 255, 255), 2)

                    isRightCornerInsideSecondContour = x2 < (x1+w1) and y1 > y2 and y1 < (y2+h2)
                    isLeftCornerOutsideSecondContour = x1 < x2
                    isFirstContourLowerThanSecondContour = y1 > y2
                    condition = isRightCornerInsideSecondContour and isLeftCornerOutsideSecondContour
                    condition = condition and isFirstContourLowerThanSecondContour

                    if condition:
                        x, y, x2, y2 = min(x1, x2), min(y1, y2), max(x1+w1, x2+w2), max(y1+h1, y2+h2)
                        x, y, w, h = x, y, x2-x, y2-y
                        cv2.rectangle(im, (x, y), (x+w, y+h), (0, 255, 0), 2)
                        tmp.add( (x, y, w, h) )
                        isContourDisconnected = True
                if not isContourDisconnected:
                    tmp.add( c1 )

                validContoursWithData = list(tmp)
        # Sort contours from left to right
        validContoursWithData.sort()

        # Declare final string, this will have the final number sequence by the end of the program.
        strFinalString = ""
        # Run the KNN algorithm on each contour.
        for c in validContoursWithData:
            # Draw a green rect around the current char
            x, y, w, h = c

            # Crop char out of threshold image
            imgROI = imgThresh[y:y+h, x:x+w]

            # Resize image, this will be more consistent for recognition and storage
            imgROIResized = cv2.resize(imgROI, (RESIZED_IMAGE_WIDTH, RESIZED_IMAGE_HEIGHT))

            # Flatten image into 1d numpy array
            npaROIResized = imgROIResized.reshape((1, RESIZED_IMAGE_WIDTH * RESIZED_IMAGE_HEIGHT))

            # Convert from 1d numpy array of ints to 1d numpy array of floats
            npaROIResized = np.float32(npaROIResized)

            # Call KNN function to find nearest character
            retval, npaResults, neigh_resp, dists = self.kNearest.findNearest(npaROIResized, k = 1)

            # Reject the character if its not within the acceptable limit.
            if dists[0][0]/1000000.0 > 8.0:
                # Draw rectangle on original testing image
                cv2.rectangle(imgTestingNumbers, (x, y), (x+w, y+h), (0, 0, 255), 2)
                continue

            # Draw rectangle on original testing image
            cv2.rectangle(imgTestingNumbers, (x, y), (x+w, y+h), (0, 255, 0), 2)

            # Get character from results
            strCurrentChar = str(chr(int(npaResults[0][0])))

            # Append current char to full string
            strFinalString = strFinalString + strCurrentChar

        return strFinalString, imgTestingNumbers, imgThresh



    def testOCR(self):
        LABELS = ['0123456789', '574920', '027430', '602350', '027430', '166', '059',\
           '22', '015', '647500', '034790', '682290', '034790', '203', '26', '072', '665240', \
           '722990', '27', '076', '076', '745780', '018250', '764030', '082', '223', '228', '082',\
           '083', '572160', '019610', '591770', '159', '161', '21', '058', '159', '058', '542580', \
           '154', '563610', '153', '000001', '007', '096900', '106852', '014', '036', '013', '471960',\
           '087075', '111', '087075', '609300', '007214', '056', '007088', '212172', '143', '143', '20',\
           '101548', '513100', '147', '052', '033710', '204', '6503428']

        totalTests = 68
        totalFail = 0
        for i in range(totalTests):
            filename = __file__.replace('ocr.py', 'test_cases/')
            if i < 10:
                filename += '0'+str(i)
            else:
                filename += str(i)
            filename += '.png'

            # Read in testing numbers image
            img = cv2.imread(filename)

            # If image was not read successfully, report error and exit
            if img is None:
                print "error: image not read from file \n\n"
                os.system("pause")
                exit(1)

            if i == 67:
                resultString, resultImg, imgThresh = self.readCharacters(img, game=self, isWhiteBackground=True)

            else:
                resultString, resultImg, imgThresh = self.readCharacters(img, game=self)

            print "[test#%s]" %(str(i).rjust(2, '0')),
            if resultString == LABELS[i]:
                print "PASS",
            else:
                totalFail += 1
                print "FAIL",

            print "result:[%s]" %resultString, "expected:[%s]" %LABELS[i]
            print "Press any key to test next image\n"
            cv2.imshow("resultImg", resultImg)
            cv2.waitKey(0)

        print "-" * 40
        print "PASSED: %d tests" %(totalTests-totalFail)
        print "FAILED: %d tests" %totalFail

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Character Recognition Program')

    # input image
    parser.add_argument('-t', '--test',
                        action='store_true',
                        help='path to input image file.')

    parser.add_argument('-i', '--img-path',
                        help='path to input image file (use quotes to include spaces in path).')

    parser.add_argument('-w','--white-background',
                        action='store_true',
                        help='input image has white background (default: %(default)s).')

    # Start parsing command line arguments
    args = parser.parse_args()

    # create OCR object
    ocr = OCR()

    if args.test:
        ocr.testOCR()
    elif args.img_path is not None:
        imgPath = args.img_path
        isWhiteBackground = args.white_background

        # read in testing numbers image
        img = cv2.imread(imgPath)

        # if image was not read successfully, report error and exit
        if img is None:
            print "error: image not read from file \n\n"
            os.system("pause")
            exit(1)

        resultString, resultImg, imgThresh = ocr.readCharacters(img, isWhiteBackground=isWhiteBackground, game=ocr)

        print "result:[%s]" %resultString
        print "Press any key to close the window"
        cv2.imshow("resultImg", resultImg)
        cv2.waitKey(0)
    else:
        print "Please use the appropriate flags to run the program"
